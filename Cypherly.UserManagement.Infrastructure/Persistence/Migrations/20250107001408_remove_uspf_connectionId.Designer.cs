// <auto-generated />
using System;
using Cypherly.UserManagement.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cypherly.UserManagement.Persistence.Migrations
{
    [DbContext(typeof(UserManagementDbContext))]
    [Migration("20250107001408_remove_uspf_connectionId")]
    partial class remove_uspf_connectionId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cypherly.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessage", (string)null);
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Aggregates.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Entities.BlockedUser", b =>
                {
                    b.Property<Guid>("BlockingUserProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockedUserProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BlockingUserProfileId", "BlockedUserProfileId");

                    b.ToTable("BlockedUser", (string)null);
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Entities.Friendship", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserProfileId", "FriendProfileId");

                    b.HasIndex("FriendProfileId");

                    b.ToTable("Friendship", (string)null);
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Aggregates.UserProfile", b =>
                {
                    b.OwnsOne("Cypherly.UserManagement.Domain.ValueObjects.UserTag", "UserTag", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Tag")
                                .IsRequired()
                                .HasMaxLength(58)
                                .HasColumnType("character varying(58)");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfile");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("UserTag")
                        .IsRequired();
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Entities.BlockedUser", b =>
                {
                    b.HasOne("Cypherly.UserManagement.Domain.Aggregates.UserProfile", null)
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockingUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("Cypherly.UserManagement.Domain.Aggregates.UserProfile", "FriendProfile")
                        .WithMany("FriendshipsReceived")
                        .HasForeignKey("FriendProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cypherly.UserManagement.Domain.Aggregates.UserProfile", "UserProfile")
                        .WithMany("FriendshipsInitiated")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendProfile");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Cypherly.UserManagement.Domain.Aggregates.UserProfile", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("FriendshipsInitiated");

                    b.Navigation("FriendshipsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
